width = 0.7
) +
labs(
title = "Total Food Waste by Source",
x = "Source",
y = "Total Food Waste"
) +
scale_fill_manual(
values = c("orange" = "orange", "green" = "green", "blue" = "blue"),
name = "Food Waste Types",
breaks = c("orange", "green", "blue"),
labels = c("Retail", "Household", "Food Service")
) +
theme_minimal()
# Create a bar graph with number labels
ggplot() +
geom_bar(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
fill = c("green", "orange", "blue")),
stat = "identity",
position = "dodge",
width = 0.7
) +
geom_text(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
label = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3]))),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3
) +
labs(
title = "Total Food Waste by Source",
x = "Source",
y = "Total Food Waste"
) +
scale_fill_manual(
values = c("orange" = "orange", "green" = "green", "blue" = "blue"),
name = "Food Waste Types",
breaks = c("orange", "green", "blue"),
labels = c("Retail", "Household", "Food Service")
) +
theme_minimal()
# Create a bar graph with number labels
ggplot() +
geom_bar(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
fill = c("green", "orange", "blue")),
stat = "identity",
position = "dodge",
width = 0.7
) +
geom_text(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
label = scales::comma(c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])))),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3
) +
labs(
title = "Total Food Waste by Source",
x = "Source",
y = "Total Food Waste"
) +
scale_fill_manual(
values = c("orange" = "orange", "green" = "green", "blue" = "blue"),
name = "Food Waste Types",
breaks = c("orange", "green", "blue"),
labels = c("Retail", "Household", "Food Service")
) +
theme_minimal()
ggplot(averageFoodWasteByRegion, aes(x = reorder(region, avg_combined_kpcpy), y = avg_combined_kpcpy, fill = "Combined")) +
geom_bar(stat = "identity", fill = "blue", width = 0.7) +
geom_col(aes(y = avg_household_kpcpy, fill = "Household"), width = 0.7) +
geom_col(aes(y = avg_retail_kpcpy, fill = "Retail"), width = 0.7) +
geom_col(aes(y = avg_food_service_kpcpy, fill = "Food Service"), width = 0.7) +
labs(
title = "Relative Proportions of Food Waste Types by Region",
x = "Region",
y = "Average Per-Capita Food Waste (kg/year)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5)) +
scale_fill_manual(
values = c("Household" = "green", "Retail" = "blue", "Food Service" = "orange"),
name = "Waste Types",
labels = c("Retail", "Household", "Food Service")
) +
guides(fill = guide_legend(title = "Food Waste Types")) +
coord_flip()  # Flip the x and y axes for horizontal bars
# Create a bar graph with number labels
ggplot() +
geom_bar(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
fill = c("green", "orange", "blue")),
stat = "identity",
position = "dodge",
width = 0.7
) +
geom_text(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
label = scales::comma(c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])))),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3
) +
labs(
title = "Total Food Waste by Source",
x = "Source",
y = "Total Food Waste"
) +
scale_fill_manual(
values = c("orange" = "orange", "green" = "green", "blue" = "blue"),
name = "Food Waste Types",
breaks = c("orange", "green", "blue"),
labels = c("Retail", "Household", "Food Service")
) +
theme_minimal()
# Create a bar graph with number labels
ggplot() +
geom_bar(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
fill = c("green", "orange", "blue")),
stat = "identity",
position = "dodge",
width = 0.7
) +
geom_text(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
label = scales::comma(c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])))),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3
) +
labs(
title = "Total Food Waste by Source",
x = "Source",
y = "Total Food Waste (kg)"
) +
scale_fill_manual(
values = c("orange" = "orange", "green" = "green", "blue" = "blue"),
name = "Food Waste Types",
breaks = c("orange", "green", "blue"),
labels = c("Retail", "Household", "Food Service")
) +
theme_minimal()
# Create a bar graph with number labels
ggplot() +
geom_bar(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
fill = c("green", "orange", "blue")),
stat = "identity",
position = "dodge",
width = 0.7
) +
geom_text(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
label = scales::comma(c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])))),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3
) +
labs(
title = "Total Food Waste by Source",
x = "Source",
y = "Total Food Waste (kg)"
) +
scale_fill_manual(
values = c("orange" = "orange", "green" = "green", "blue" = "blue"),
name = "Food Waste Sources",
breaks = c("orange", "green", "blue"),
labels = c("Retail", "Household", "Food Service")
) +
theme_minimal()
# Show how different categories of per-capita food waste compare in each region
# Create a bar graph
ggplot(averageFoodWasteByRegion, aes(x = reorder(region, avg_combined_kpcpy), y = avg_combined_kpcpy, fill = "Combined")) +
geom_bar(stat = "identity", fill = "blue", width = 0.7) +
geom_col(aes(y = avg_household_kpcpy, fill = "Household"), width = 0.7) +
geom_col(aes(y = avg_retail_kpcpy, fill = "Retail"), width = 0.7) +
geom_col(aes(y = avg_food_service_kpcpy, fill = "Food Service"), width = 0.7) +
labs(
title = "Relative Proportions of Food Waste Types by Region",
x = "Region",
y = "Average Per-Capita Food Waste (kg/year)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5)) +
scale_fill_manual(
values = c("Household" = "green", "Retail" = "blue", "Food Service" = "orange"),
name = "Waste Types",
labels = c("Retail", "Household", "Food Service")
) +
guides(fill = guide_legend(title = "Food Waste Types")) +
coord_flip()  # Flip the x and y axes for horizontal bars
# Create a bar graph with number labels
ggplot() +
geom_bar(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
fill = c("green", "orange", "blue")),
stat = "identity",
position = "dodge",
width = 0.7
) +
geom_text(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
label = scales::comma(c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])))),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3
) +
labs(
title = "Total Food Waste by Source",
x = "Source",
y = "Total Food Waste (kg)"
) +
scale_fill_manual(
values = c("orange" = "orange", "green" = "green", "blue" = "blue"),
name = "Sources",
breaks = c("orange", "green", "blue"),
labels = c("Retail", "Household", "Food Service")
) +
theme_minimal()
# Create a bar graph with number labels
ggplot() +
geom_bar(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
fill = c("green", "orange", "blue")),
stat = "identity",
position = "dodge",
width = 0.7
) +
geom_text(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
label = scales::comma(c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])))),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3
) +
labs(
title = "Total Food Waste by Source",
x = "Source",
y = "Total Food Waste (kg)"
) +
scale_fill_manual(
values = c("orange" = "orange", "green" = "green", "blue" = "blue"),
name = "Food Waste Types",
breaks = c("orange", "green", "blue"),
labels = c("Retail", "Household", "Food Service")
) +
theme_minimal()
ggplot(averageFoodWasteByRegion, aes(x = reorder(region, avg_combined_kpcpy), y = avg_combined_kpcpy, fill = "Combined")) +
geom_bar(stat = "identity", fill = "blue", width = 0.7) +
geom_col(aes(y = avg_household_kpcpy, fill = "Household"), width = 0.7) +
geom_col(aes(y = avg_retail_kpcpy, fill = "Retail"), width = 0.7) +
geom_col(aes(y = avg_food_service_kpcpy, fill = "Food Service"), width = 0.7) +
labs(
title = "Relative Proportions of Food Waste Types by Region",
x = "Region",
y = "Average Per-Capita Food Waste (kg/year)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5)) +
scale_fill_manual(
values = c("Household" = "green", "Retail" = "blue", "Food Service" = "orange"),
name = "Food Waste Types",
labels = c("Retail", "Household", "Food Service")
) +
guides(fill = guide_legend(title = "Food Waste Types")) +
coord_flip()  # Flip the x and y axes for horizontal bars
# Create a bar graph with number labels
ggplot() +
geom_bar(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
fill = c("green", "orange", "blue")),
stat = "identity",
position = "dodge",
width = 0.7
) +
geom_text(
aes(x = c("Household", "Retail", "Food Service"),
y = c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])),
label = scales::comma(c(as.numeric(totalFoodWaste[1,1]),
as.numeric(totalFoodWaste[1,2]),
as.numeric(totalFoodWaste[1,3])))),
position = position_dodge(width = 0.7),
vjust = -0.5, size = 3
) +
labs(
title = "Total Food Waste by Source",
x = "Source",
y = "Total Food Waste (kg)"
) +
scale_fill_manual(
values = c("orange" = "orange", "green" = "green", "blue" = "blue"),
name = "Food Waste Types",
breaks = c("orange", "green", "blue"),
labels = c("Retail", "Household", "Food Service")
) +
theme_minimal()
unique(foodWasteData$region)
# Quick loading for future sessions
library(tidyverse)
library(dplyr)
library(sqldf)
library(ggplot2)
library(readr)
# Load dataset linking M49 codes to ISO-alpha3 codes
codesData <- read_csv("M49 and ISO-alpha3 codes.csv")
View(codesData)
codesData <- sqldf("SELECT 'M49 code', 'ISO-alpha3 code' FROM codesData")
# Load dataset linking M49 codes to ISO-alpha3 codes
codesData <- read_csv("M49 and ISO-alpha3 codes.csv")
codesData <- sqldf("SELECT M49 code, ISO-alpha3 code FROM codesData")
names(codesData)[names(codesData) == 'M49 code'] <- 'm49_code'
names(codesData)[names(codesData) == 'ISO-alpha3 code'] <- 'ISO-alpha3_code'
codesData <- sqldf("SELECT m49_code, ISO-alpha3_code FROM codesData")
names(codesData)[names(codesData) == 'ISO-alpha3 code'] <- 'iso_alpha3_code'
codesData <- sqldf("SELECT m49_code, ISO-alpha3_code FROM codesData")
codesData <- sqldf("SELECT m49_code, iso_alpha3_code FROM codesData")
names(codesData)[names(codesData) == 'M49 code'] <- 'm49_code'
names(codesData)[names(codesData) == 'ISO-alpha3 code'] <- 'iso_alpha3_code'
colnames(codesData)
names(codesData)[names(codesData) == 'ISO-alpha3_code'] <- 'iso_alpha3_code'
codesData <- sqldf("SELECT m49_code, iso_alpha3_code FROM codesData")
# Making backup of modified foodWasteData before performing joins
foodWasteDataPreJoin <- foodWasteData
result <- sqldf("SELECT * FROM foodWasteData INNER JOIN codesData
ON foodWasteData.m49_code = codesData.m49_code")
View(result)
foodWasteData <- sqldf("SELECT * FROM foodWasteData INNER JOIN codesData
ON foodWasteData.m49_code = codesData.m49_code")
rm(result)
# Load population dataset to be joined with foodWasteData using ISO-alpha3 codes
populationData <- read_csv("2021_population.csv")
View(populationData)
names(populationData)[names(populationData) == 'iso_code'] <- 'iso_alpha3_code'
populationData <- sqldf("SELECT iso_alpha3_code, 2021_last_updated AS population_2021 FROM populationData")
populationData <- sqldf("SELECT iso_alpha3_code, 2021_last_updated AS population_2021 FROM populationData")
populationData <- sqldf("SELECT iso_alpha3_code, 2021_last_updated FROM populationData")
colnames(populationData)
populationData <- sqldf("SELECT iso_alpha3_code, 2021_last_updated FROM populationData")
populationData <- sqldf("SELECT iso_alpha3_code, 2021_last_updated AS population_2021 FROM populationData")
View(foodWasteData)
# Reorder foodWasteData and remove unnecessary duplicate m49 column
test <- foodWasteData[, -which(names(foodWasteData) == "m49_code.1")]
# Reorder foodWasteData and remove unnecessary duplicate m49 column
test <- <- foodWasteData[, -13]
# Reorder foodWasteData and remove unnecessary duplicate m49 column
test <- foodWasteData[, -13]
View(test)
# Reorder foodWasteData and remove unnecessary duplicate m49 column
foodWasteData <- foodWasteData[, -13]
foodWasteData <- merge(foodWasteData, populationData, by = "iso_alpha3_code", all.x = TRUE)
populationData <- sqldf("SELECT iso_alpha3_code, population_2021 FROM populationData")
library(tidyverse)
library(dplyr)
library(sqldf)
library(ggplot2)
library(readr)
populationData <- sqldf("SELECT iso_alpha3_code, population_2021 FROM populationData")
names(populationData)[names(populationData) == 'iso_code'] <- 'iso_alpha3_code'
names(populationData)[names(populationData) == '2021_last_updated'] <- 'population_2021'
populationData <- sqldf("SELECT iso_alpha3_code, population_2021 FROM populationData")
foodWasteData <- merge(foodWasteData, populationData, by = "iso_alpha3_code", all.x = TRUE)
# Making backup of modified foodWasteData before performing joins
foodWasteDataPreJoin <- foodWasteData
foodWasteDataPreJoin <- foodWasteData[, 1:13]
View(foodWasteDataPreJoin)
# Restoring backup of original food waste dataframe
foodWasteData <- foodWasteDataOriginal
# Create new column for combined estimate in tonnes/year, then reorder columns
foodWasteData <- mutate(foodWasteData, combined_estimate_tonnes_per_year = foodWasteData$`Household estimate (tonnes/year)` + foodWasteData$`Retail estimate (tonnes/year)` + foodWasteData$`Food service estimate (tonnes/year)`)
foodWasteData <- foodWasteData[, c(1,2,13,3,4,5,6,7,8,9,10,11,12)]
# Changing column names to make them lowercase and include underscores
new_col_names <- c("country", "combined_estimate_kpcpy", "combined_estimate_tpy", "household_estimate_kpcpy", "household_estimate_tpy", "retail_estimate_kpcpy", "retail_estimate_tpy", "food_service_estimate_kpcpy", "food_service_estimate_tpy", "estimate_confidence", "m49_code", "region", "source")
names(foodWasteData) <- new_col_names
# Moving source to a separate dataframe to get it out of the way
dataSources <- sqldf("SELECT country, m49_code, source FROM foodWasteData")
foodWasteData<- foodWasteData[, -13]
# Load dataset linking M49 codes to ISO-alpha3 codes and join with foodWasteData
codesData <- read_csv("M49 and ISO-alpha3 codes.csv")
names(codesData)[names(codesData) == 'M49 code'] <- 'm49_code'
names(codesData)[names(codesData) == 'ISO-alpha3_code'] <- 'iso_alpha3_code'
codesData <- sqldf("SELECT m49_code, iso_alpha3_code FROM codesData")
View(codesData)
# Making backup of modified foodWasteData before performing joins
foodWasteDataPreJoin <- foodWasteData
codesData <- read_csv("M49 and ISO-alpha3 codes.csv")
names(codesData)[names(codesData) == 'M49 code'] <- 'm49_code'
names(codesData)[names(codesData) == 'ISO-alpha3_code'] <- 'iso_alpha3_code'
codesData <- sqldf("SELECT m49_code, iso_alpha3_code FROM codesData")
codesData <- read_csv("M49 and ISO-alpha3 codes.csv")
names(codesData)[names(codesData) == 'M49 code'] <- 'm49_code'
names(codesData)[names(codesData) == 'ISO-alpha3_code'] <- 'iso_alpha3_code'
codesData <- sqldf("SELECT m49_code, iso_alpha3_code FROM codesData")
names(codesData)[names(codesData) == 'M49 code'] <- 'm49_code'
names(codesData)[names(codesData) == 'ISO-alpha3_code'] <- 'iso_alpha3_code'
View(codesData)
names(codesData)[names(codesData) == 'ISO-alpha3_code'] <- 'iso_alpha3_code'
colnames(codesData)
names(codesData)[names(codesData) == 'ISO-alpha3 code'] <- 'iso_alpha3_code'
codesData <- sqldf("SELECT m49_code, iso_alpha3_code FROM codesData")
foodWasteData <- sqldf("SELECT * FROM foodWasteData INNER JOIN codesData
ON foodWasteData.m49_code = codesData.m49_code")
populationData <- read_csv("2021_population.csv")
names(populationData)[names(populationData) == 'iso_code'] <- 'iso_alpha3_code'
names(populationData)[names(populationData) == '2021_last_updated'] <- 'population_2021'
populationData <- sqldf("SELECT iso_alpha3_code, population_2021 FROM populationData")
foodWasteData <- merge(foodWasteData, populationData, by = "iso_alpha3_code", all.x = TRUE)
# Reorder foodWasteData and remove unnecessary duplicate m49 column
test <- foodWasteData[, -14]
View(test)
test <- test[, c(2,3,4,5,6,7,8,9,10,11,12,1,14)]
# Reorder foodWasteData and remove unnecessary duplicate m49 column
foodWasteData <- foodWasteData[, -14]
foodWasteData <- foodWasteData[, c(2,3,4,5,6,7,8,9,10,11,12,1,14)]
rm(test)
library(tidyverse)
library(dplyr)
library(sqldf)
library(ggplot2)
library(readr)
# Create the scatterplot
ggplot(foodWasteData, aes(x = population_2021, y = combined_estimate_tpy)) +
geom_point() +
labs(
title = "Population vs. Combined Food Waste Estimate",
x = "Population in 2021",
y = "Combined Food Waste Estimate (tonnes/year)"
) +
theme_minimal()
# Create the scatterplot with a regression line
ggplot(foodWasteData, aes(x = population_2021, y = combined_estimate_tpy)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Add regression line
labs(
title = "Population vs. Combined Food Waste Estimate",
x = "Population in 2021",
y = "Combined Food Waste Estimate (tonnes/year)"
) +
theme_minimal()
# Create the scatterplot with a regression line
ggplot(foodWasteData, aes(x = population_2021, y = combined_estimate_tpy)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Add regression line
labs(
title = "Population vs. Combined Food Waste Estimate",
x = "Population in 2021",
y = "Combined Food Waste Estimate (tonnes/year)"
) +
theme_minimal()
# Calculate the regression coefficient r^2
foodwaste_regression <- lm(population_2021 ~ combined_estimate_tpy, data = foodWasteData)
r_squared <- summary(foodwaste_regression)$r.squared
print(r_squared)
View(foodWasteDataOriginal)
View(dataSources)
View(foodWasteData)
